# testing locally with act cli

# act -W .github/workflows/ci.yml --container-architecture linux/amd64 -env ACTIONS_RUNTIME_URL=http://host.docker.internal:8080/ --env ACTIONS_RUNTIME_TOKEN=foo --env ACTIONS_CACHE_URL=http://host.docker.internal:8080/ --artifact-server-path out -j build-ubuntu -P ubuntu-latest=-self-hosted --env-file .env --secret-file .secrets

name: Rust CI

on:
  push:
  pull_request:

jobs:
  test-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr libtesseract-dev libavformat-dev libavfilter-dev libavdevice-dev ffmpeg libasound2-dev libgtk-3-dev libsoup-3.0-dev libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev
          sudo apt-get install -y libxcb-randr0-dev libxcb-xtest0-dev libxcb-xinerama0-dev libxcb-shape0-dev libxcb-xkb-dev

      - name: Copy test image
        run: |
          mkdir -p target/debug/deps
          cp screenpipe-vision/tests/testing_OCR.png target/debug/deps/

      - name: Run tests
        run: cargo test

  test-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~\AppData\Local\cargo\
            target\
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Run pre_build.js on
        shell: bash
        run: bun ./scripts/pre_build.js
        working-directory: ./examples/apps/screenpipe-app-tauri

      # - name: Run tests
      #   run: cargo test

      - name: Copy test image
        shell: bash
        run: |
          mkdir -p target/debug/deps || true
          cp screenpipe-vision/tests/testing_OCR.png target/debug/deps/

      - name: Run specific Windows OCR test
        run: cargo test test_process_ocr_task_windows

  test-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~\AppData\Local\cargo\
            target\
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Run pre_build.js on
        shell: bash
        env:
          SKIP_SCREENPIPE_SETUP: true # avoid trying to copy screenpipe binaries, not yet built (next step)
        run: bun ./scripts/pre_build.js
        working-directory: ./examples/apps/screenpipe-app-tauri

      - name: Copy test image
        shell: bash
        run: |
          mkdir -p target/debug/deps || true
          cp screenpipe-vision/tests/testing_OCR.png target/debug/deps/

      - name: Run specific Apple OCR test
        shell: bash
        env:
          DYLD_LIBRARY_PATH: /Users/runner/work/screenpipe/screenpipe/screenpipe-vision/lib
        run: cargo test test_apple_native_ocr

  test-cli:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libgtk-3-dev libsoup-3.0-dev libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev ffmpeg
          sudo apt-get install -y libavutil-dev libavformat-dev libavfilter-dev libavdevice-dev
          sudo apt-get install -y pkg-config xvfb pulseaudio xdotool x11-xserver-utils sox
          sudo apt-get install -y libx11-dev libxcb1-dev
          sudo apt-get install -y scrot
          sudo apt-get install -y libxcb-randr0-dev libxcb-xtest0-dev libxcb-xinerama0-dev libxcb-shape0-dev libxcb-xkb-dev

      - name: Build CLI
        run: cargo build --release --bin screenpipe

      - name: Debug setup (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb pulseaudio ffmpeg imagemagick xdotool x11-xserver-utils xterm openbox alsa-utils
          Xvfb :99 -ac -screen 0 1024x768x24 &
          export DISPLAY=:99
          echo "DISPLAY=:99" >> $GITHUB_ENV
          sleep 5
          openbox &
          sleep 5
          pulseaudio --start
          sleep 2
          pacmd load-module module-null-sink sink_name=virtual_speaker
          pacmd set-default-sink virtual_speaker
          pacmd load-module module-virtual-source source_name=virtual_mic master=virtual_speaker.monitor
          pacmd set-default-source virtual_mic
          sleep 5

          # Debug information
          echo "X11 setup:"
          xdpyinfo | head -n 10
          echo "Window list:"
          xwininfo -root -tree

          echo "Audio setup:"
          pacmd list-sinks
          pacmd list-sources
          pactl list short sinks
          pactl list short sources

          echo "Environment variables:"
          env | grep -E 'DISPLAY|XAUTHORITY|PULSE'

          echo "Process list:"
          ps aux | grep -E 'Xvfb|pulseaudio|openbox'

      - name: Debug CLI execution (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          export DISPLAY=:99
          mkdir -p ./test_data/logs
          echo "Starting screenpipe CLI..."
          RUST_LOG=debug ./target/release/screenpipe --data-dir ./test_data --fps 1 &
          CLI_PID=$!
          sleep 10

          echo "Checking if CLI is running:"
          if ps -p $CLI_PID > /dev/null; then
            echo "CLI is running with PID $CLI_PID"
          else
            echo "CLI process has died"
          fi

          echo "Attempting to query health endpoint:"
          curl -v http://localhost:3030/health || true

          echo "CLI output:"
          cat ./test_data/logs/screenpipe.log || true

          echo "Killing CLI process"
          kill $CLI_PID || true

      - name: Debug setup (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Write-Output "Display information:"
          Get-WmiObject -Class Win32_VideoController | Format-List Name, VideoModeDescription

          Write-Output "Audio devices:"
          Get-WmiObject -Class Win32_SoundDevice | Format-List Name, Status

          Write-Output "Environment variables:"
          Get-ChildItem Env: | Where-Object { $_.Name -match 'DISPLAY|AUDIO' }

      - name: Debug CLI execution (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $env:RUST_LOG = "debug"
          New-Item -ItemType Directory -Force -Path .\test_data\logs
          Write-Output "Starting screenpipe CLI..."
          Start-Process -FilePath .\target\release\screenpipe.exe -ArgumentList "--data-dir", ".\test_data", "--fps", "1" -NoNewWindow -PassThru -RedirectStandardOutput screenpipe_output.log -RedirectStandardError screenpipe_error.log
          Start-Sleep -Seconds 10

          Write-Output "Checking if CLI is running:"
          $process = Get-Process screenpipe -ErrorAction SilentlyContinue
          if ($process) {
            Write-Output "CLI is running with PID $($process.Id)"
          } else {
            Write-Output "CLI process not found"
          }

          Write-Output "Attempting to query health endpoint:"
          try {
            Invoke-RestMethod -Uri http://localhost:3030/health -ErrorAction Stop
          } catch {
            Write-Output "Error querying health endpoint: $_"
          }

          Write-Output "CLI output:"
          Get-Content .\test_data\logs\screenpipe.log -ErrorAction SilentlyContinue
          Get-Content screenpipe_output.log -ErrorAction SilentlyContinue
          Get-Content screenpipe_error.log -ErrorAction SilentlyContinue

          Write-Output "Stopping CLI process"
          Stop-Process -Name screenpipe -ErrorAction SilentlyContinue
